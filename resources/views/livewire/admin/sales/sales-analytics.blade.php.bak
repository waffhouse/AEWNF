<div>
    <div class="bg-white shadow-sm rounded-lg p-4 border border-gray-200">
        <div class="mb-4">
            <h3 class="text-lg font-semibold text-red-600 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                Sales Analytics by Class and Brand
            </h3>
            <p class="mt-1 text-sm text-gray-500">
                Analyze sales performance by item class and brand. View key metrics and trends to identify top performers.
            </p>
        </div>
        
        <!-- Filters Section -->
        <div class="mb-6 bg-gray-50 p-4 rounded-md">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Date Range Filter -->
                <div>
                    <label for="dateRange" class="block text-sm font-medium text-gray-700">Date Range</label>
                    <select id="dateRange" 
                        wire:model.live="dateRange" 
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm">
                        @foreach($dateRangeOptions as $value => $label)
                            <option value="{{ $value }}">{{ $label }}</option>
                        @endforeach
                    </select>
                </div>
                
                <!-- Custom Date Range -->
                @if($dateRange === 'custom')
                <div>
                    <label for="customStartDate" class="block text-sm font-medium text-gray-700">Start Date</label>
                    <input type="date" 
                        id="customStartDate" 
                        wire:model.live="customStartDate"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm">
                </div>
                <div>
                    <label for="customEndDate" class="block text-sm font-medium text-gray-700">End Date</label>
                    <input type="date" 
                        id="customEndDate" 
                        wire:model.live="customEndDate"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm">
                </div>
                @else
                <!-- Group By Filter -->
                <div>
                    <label for="groupBy" class="block text-sm font-medium text-gray-700">Group By</label>
                    <select id="groupBy" 
                        wire:model.live="groupBy" 
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm">
                        <option value="class">Class</option>
                        <option value="brand">Brand</option>
                    </select>
                </div>
                @endif
            </div>
        </div>
        
        <!-- Charts Section -->
        <div class="mb-6 grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Amount Charts -->
            <div class="bg-white rounded-lg shadow p-4">
                <h4 class="font-medium text-gray-700 mb-3">Sales Amount by {{ ucfirst($groupBy) }}</h4>
                <div class="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-4">
                    <!-- Pie Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Top 5 by Amount</h5>
                        <div class="h-64">
                            <canvas id="amountPieChart"></canvas>
                        </div>
                    </div>
                    <!-- Bar Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Invoice vs Credit</h5>
                        <div class="h-64">
                            <canvas id="amountBarChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Quantity Charts -->
            <div class="bg-white rounded-lg shadow p-4">
                <h4 class="font-medium text-gray-700 mb-3">Sales Quantity by {{ ucfirst($groupBy) }}</h4>
                <div class="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-4">
                    <!-- Pie Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Top 5 by Quantity</h5>
                        <div class="h-64">
                            <canvas id="quantityPieChart"></canvas>
                        </div>
                    </div>
                    <!-- Bar Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Invoice vs Credit</h5>
                        <div class="h-64">
                            <canvas id="quantityBarChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Charts Section -->
        <div class="mb-6 grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Amount Charts -->
            <div class="bg-white rounded-lg shadow p-4">
                <h4 class="font-medium text-gray-700 mb-3">Sales Amount by {{ ucfirst($groupBy) }}</h4>
                <div class="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-4">
                    <!-- Pie Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Top 5 by Amount</h5>
                        <div class="h-64">
                            <canvas id="amountPieChart"></canvas>
                        </div>
                    </div>
                    <!-- Bar Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Invoice vs Credit</h5>
                        <div class="h-64">
                            <canvas id="amountBarChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Quantity Charts -->
            <div class="bg-white rounded-lg shadow p-4">
                <h4 class="font-medium text-gray-700 mb-3">Sales Quantity by {{ ucfirst($groupBy) }}</h4>
                <div class="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-4">
                    <!-- Pie Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Top 5 by Quantity</h5>
                        <div class="h-64">
                            <canvas id="quantityPieChart"></canvas>
                        </div>
                    </div>
                    <!-- Bar Chart -->
                    <div class="flex-1">
                        <h5 class="text-sm font-medium text-gray-600 mb-2 text-center">Invoice vs Credit</h5>
                        <div class="h-64">
                            <canvas id="quantityBarChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Top 10 Section -->
        <div class="mb-6">
            <h4 class="font-medium text-gray-700 mb-3">Top 10 {{ ucfirst($groupBy) }}es by Sales Volume</h4>
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{{ ucfirst($groupBy) }}</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Total Sales</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Total Qty</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">% of Total</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @php
                                $totalSalesAmount = $topSales->sum('total_amount');
                                $totalSalesQuantity = $topSales->sum('total_quantity');
                            @endphp
                            
                            @forelse($topSales as $item)
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $item->{$groupBy} }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                                        ${{ number_format(abs($item->total_amount), 2) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                                        {{ number_format(abs($item->total_quantity)) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                                        @if($totalSalesAmount != 0)
                                            {{ round(($item->total_amount / $totalSalesAmount) * 100, 2) }}%
                                        @else
                                            0%
                                        @endif
                                    </td>
                                </tr>
                            @empty
                                <tr>
                                    <td colspan="4" class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500">
                                        No data available for this time period.
                                    </td>
                                </tr>
                            @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Detailed Breakdown -->
        <div>
            <h4 class="font-medium text-gray-700 mb-3">Detailed Breakdown by {{ ucfirst($groupBy) }}</h4>
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{{ ucfirst($groupBy) }}</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Invoice Amount</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Credit Amount</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Net Amount</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Invoice Qty</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Credit Qty</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Net Qty</th>
                                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Transactions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @forelse($salesData as $item)
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $item->{$groupBy} }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-green-600">
                                        ${{ number_format(abs($item->invoice_amount), 2) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-red-600">
                                        ${{ number_format(abs($item->credit_amount), 2) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right {{ $item->total_amount >= 0 ? 'text-green-600' : 'text-red-600' }} font-medium">
                                        ${{ number_format(abs($item->total_amount), 2) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-green-600">
                                        {{ number_format(abs($item->invoice_quantity)) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-red-600">
                                        {{ number_format(abs($item->credit_quantity)) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right {{ $item->total_quantity >= 0 ? 'text-green-600' : 'text-red-600' }} font-medium">
                                        {{ number_format(abs($item->total_quantity)) }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                                        {{ number_format($item->transaction_count) }}
                                    </td>
                                </tr>
                            @empty
                                <tr>
                                    <td colspan="8" class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500">
                                        No data available for this time period.
                                    </td>
                                </tr>
                            @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Info Box -->
        <div class="mt-6 bg-blue-50 p-4 rounded-md border border-blue-200">
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <h5 class="text-sm font-medium text-blue-800">About This Report</h5>
                    <div class="mt-2 text-sm text-blue-700">
                        <p>This report provides insights into sales performance by item class and brand. You can:</p>
                        <ul class="list-disc pl-5 space-y-1 mt-2">
                            <li>Filter by different date ranges to see trends over time</li>
                            <li>Switch between class and brand grouping to analyze performance from different angles</li>
                            <li>Identify top performing classes and brands to inform inventory and marketing decisions</li>
                            <li>View the breakdown of invoices vs. credit memos to understand net sales impact</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Charts are loaded via the script at the end of the page -->
        // Flag to track if we need to delay initialization
        let delayChartInit = true;
        
        // Ensure Chart.js is available
        if (typeof Chart === 'undefined') {
            console.error('Chart.js not loaded! Attempting to load from CDN...');
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js';
            script.async = true;
            document.head.appendChild(script);
            
            script.onload = function() {
                console.log('Chart.js loaded successfully from fallback CDN');
                setTimeout(initializeChartsWithRetry, 300);
            };
        } else {
            console.log('Chart.js found, proceeding with initialization');
            delayChartInit = false;
        }
    </script>
    
    <!-- Main Chart Initialization Script -->
    <script>
        // Function to retry chart initialization with a maximum number of attempts
        function initializeChartsWithRetry(attempts = 5) {
            if (attempts <= 0) {
                console.error('Failed to initialize charts after multiple attempts');
                return;
            }
            
            if (typeof Chart === 'undefined') {
                console.warn(`Chart.js not available, retrying... (${attempts} attempts left)`);
                setTimeout(() => initializeChartsWithRetry(attempts - 1), 500);
                return;
            }
            
            try {
                initializeCharts();
                console.log('Charts initialized successfully');
            } catch (error) {
                console.error('Error initializing charts, retrying...', error);
                setTimeout(() => initializeChartsWithRetry(attempts - 1), 500);
            }
        }
        // Debounce function to prevent too many chart redraws
        function debounce(func, wait) {
            let timeout;
            return function() {
                const context = this;
                const args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func.apply(context, args);
                }, wait);
            };
        }
        
        // Create a debounced version of chart initialization with retry
        const debouncedInitCharts = debounce(function() {
            console.log('Debounced chart initialization');
            initializeChartsWithRetry();
        }, 300);
        
        // Initialize once the component is ready
        document.addEventListener('livewire:initialized', function () {
            console.log('Livewire initialized event');
            // If we need to delay, give Chart.js time to load
            if (delayChartInit) {
                setTimeout(initializeChartsWithRetry, 500);
            } else {
                initializeChartsWithRetry();
            }
        });
        
        // Re-initialize when navigating to the page
        document.addEventListener('livewire:navigated', function () {
            console.log('Livewire navigated event');
            debouncedInitCharts();
        });
        
        // Handle updates but with debouncing to prevent flickering
        document.addEventListener('livewire:update', function () {
            console.log('Livewire update event');
            debouncedInitCharts();
        });
        
        // Also initialize on DOM content loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOMContentLoaded event');
            setTimeout(initializeChartsWithRetry, 300);
        });
        
        function initializeCharts() {
            console.log('Initializing charts...');
            
            // Define chart color schemes
            const pieColors = [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)'
            ];
            
            const barInvoiceColor = 'rgba(75, 192, 192, 0.7)';
            const barCreditColor = 'rgba(255, 99, 132, 0.7)';
            
            // Parse all needed data first
            const pieLabels = {!! $pieLabels !!} || [];
            const pieValues = {!! $pieValues !!} || [];
            const pieQtyLabels = {!! $pieQtyLabels !!} || [];
            const pieQtyValues = {!! $pieQtyValues !!} || [];
            
            const barLabels = {!! $barLabels !!} || [];
            const invoiceAmounts = {!! $invoiceAmounts !!} || [];
            const creditAmounts = {!! $creditAmounts !!} || [];
            
            const barQtyLabels = {!! $barQtyLabels !!} || [];
            const invoiceQuantities = {!! $invoiceQuantities !!} || [];
            const creditQuantities = {!! $creditQuantities !!} || [];
            
            const dateRangeTitle = "{{ $dateRangeTitle }}";
            const groupBy = "{{ ucfirst($groupBy) }}";
            
            console.log('Chart data loaded for rendering');
            
            // Helper function to create or update a chart
            function createChart(canvasId, config) {
                const canvas = document.getElementById(canvasId);
                if (!canvas) {
                    console.warn(`Canvas ${canvasId} not found`);
                    return null;
                }
                
                // Clean up any existing chart
                const existingChart = Chart.getChart(canvas);
                if (existingChart) {
                    existingChart.destroy();
                }
                
                // Create new chart
                return new Chart(canvas, config);
            }
            
            try {
                // Create Amount Pie Chart
                createChart('amountPieChart', {
                    type: 'pie',
                    data: {
                        labels: pieLabels,
                        datasets: [{
                            label: 'Sales Amount',
                            data: pieValues,
                            backgroundColor: pieColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: { boxWidth: 12 }
                            },
                            title: {
                                display: true,
                                text: 'Top 5 ' + groupBy + 'es by Sales Amount - ' + dateRangeTitle
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return label + ': $' + value.toLocaleString() + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Create Quantity Pie Chart
                createChart('quantityPieChart', {
                    type: 'pie',
                    data: {
                        labels: pieQtyLabels,
                        datasets: [{
                            label: 'Sales Quantity',
                            data: pieQtyValues,
                            backgroundColor: pieColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: { boxWidth: 12 }
                            },
                            title: {
                                display: true,
                                text: 'Top 5 ' + groupBy + 'es by Sales Quantity - ' + dateRangeTitle
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return label + ': ' + value.toLocaleString() + ' units (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
                if (amountPieCtx) {
                    // Check if chart instance already exists and is a Chart instance
                    if (window.amountPieChart && typeof window.amountPieChart.destroy === 'function') {
                        window.amountPieChart.destroy();
                }
                
                window.amountPieChart = new Chart(amountPieCtx, {
                    type: 'pie',
                    data: {
                        labels: pieLabels,
                        datasets: [{
                            label: 'Sales Amount',
                            data: pieValues,
                            backgroundColor: pieColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    boxWidth: 12
                                }
                            },
                            title: {
                                display: true,
                                text: 'Top 5 ' + groupBy + 'es by Sales Amount - ' + dateRangeTitle
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return label + ': $' + value.toLocaleString() + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Initialize or update Quantity Pie Chart
            const quantityPieCtx = document.getElementById('quantityPieChart');
            if (quantityPieCtx) {
                // Check if chart instance already exists and is a Chart instance
                if (window.quantityPieChart && typeof window.quantityPieChart.destroy === 'function') {
                    window.quantityPieChart.destroy();
                }
                
                window.quantityPieChart = new Chart(quantityPieCtx, {
                    type: 'pie',
                    data: {
                        labels: pieQtyLabels,
                        datasets: [{
                            label: 'Sales Quantity',
                            data: pieQtyValues,
                            backgroundColor: pieColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    boxWidth: 12
                                }
                            },
                            title: {
                                display: true,
                                text: 'Top 5 ' + groupBy + 'es by Sales Quantity - ' + dateRangeTitle
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return label + ': ' + value.toLocaleString() + ' units (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Initialize or update Amount Bar Chart
            const amountBarCtx = document.getElementById('amountBarChart');
            if (amountBarCtx) {
                // Check if chart instance already exists and is a Chart instance
                if (window.amountBarChart && typeof window.amountBarChart.destroy === 'function') {
                    window.amountBarChart.destroy();
                }
                
                window.amountBarChart = new Chart(amountBarCtx, {
                    type: 'bar',
                    data: {
                        labels: barLabels,
                        datasets: [
                            {
                                label: 'Invoice Amount',
                                data: invoiceAmounts,
                                backgroundColor: barInvoiceColor,
                                borderWidth: 1
                            },
                            {
                                label: 'Credit Amount',
                                data: creditAmounts,
                                backgroundColor: barCreditColor,
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '$' + value.toLocaleString();
                                    }
                                }
                            },
                            x: {
                                ticks: {
                                    autoSkip: true,
                                    maxRotation: 0,
                                    minRotation: 0
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top'
                            },
                            title: {
                                display: true,
                                text: 'Invoice vs Credit by ' + groupBy + ' - ' + dateRangeTitle
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        const value = context.raw || 0;
                                        return label + ': $' + value.toLocaleString();
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Initialize or update Quantity Bar Chart
            const quantityBarCtx = document.getElementById('quantityBarChart');
            if (quantityBarCtx) {
                // Check if chart instance already exists and is a Chart instance
                if (window.quantityBarChart && typeof window.quantityBarChart.destroy === 'function') {
                    window.quantityBarChart.destroy();
                }
                
                window.quantityBarChart = new Chart(quantityBarCtx, {
                    type: 'bar',
                    data: {
                        labels: barQtyLabels,
                        datasets: [
                            {
                                label: 'Invoice Quantity',
                                data: invoiceQuantities,
                                backgroundColor: barInvoiceColor,
                                borderWidth: 1
                            },
                            {
                                label: 'Credit Quantity',
                                data: creditQuantities,
                                backgroundColor: barCreditColor,
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return value.toLocaleString();
                                    }
                                }
                            },
                            x: {
                                ticks: {
                                    autoSkip: true,
                                    maxRotation: 0,
                                    minRotation: 0
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top'
                            },
                            title: {
                                display: true,
                                text: 'Invoice vs Credit Quantity by ' + groupBy + ' - ' + dateRangeTitle
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        const value = context.raw || 0;
                                        return label + ': ' + value.toLocaleString() + ' units';
                                    }
                                }
                            }
                        }
                    }
                });
            }
            } catch (error) {
                console.error('Error initializing charts:', error);
            }
        }
    </script>
</div>

<!-- Clean Chart.js Implementation -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.js"></script>
<script>
    // Initialize charts on document load and Livewire events
    document.addEventListener('DOMContentLoaded', initCharts);
    document.addEventListener('livewire:initialized', initCharts);
    document.addEventListener('livewire:navigated', initCharts);
    document.addEventListener('livewire:update', function() {
        setTimeout(initCharts, 150);
    });
    
    // Track chart instances
    const chartObjects = {};
    
    function initCharts() {
        try {
            // Define colors
            const pieColors = [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)'
            ];
            
            const barInvoiceColor = 'rgba(75, 192, 192, 0.7)';
            const barCreditColor = 'rgba(255, 99, 132, 0.7)';
            
            // Get chart data
            const pieLabels = {!! $pieLabels !!} || [];
            const pieValues = {!! $pieValues !!} || [];
            const pieQtyLabels = {!! $pieQtyLabels !!} || [];
            const pieQtyValues = {!! $pieQtyValues !!} || [];
            
            const barLabels = {!! $barLabels !!} || [];
            const invoiceAmounts = {!! $invoiceAmounts !!} || [];
            const creditAmounts = {!! $creditAmounts !!} || [];
            
            const barQtyLabels = {!! $barQtyLabels !!} || [];
            const invoiceQuantities = {!! $invoiceQuantities !!} || [];
            const creditQuantities = {!! $creditQuantities !!} || [];
            
            const dateRangeTitle = "{{ $dateRangeTitle }}";
            const groupBy = "{{ ucfirst($groupBy) }}";
            
            // Create or update charts
            createOrUpdateChart('amountPieChart', {
                type: 'pie',
                data: {
                    labels: pieLabels,
                    datasets: [{
                        data: pieValues,
                        backgroundColor: pieColors
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'right' },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw || 0;
                                    const label = context.label || '';
                                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return `${label}: $${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            createOrUpdateChart('quantityPieChart', {
                type: 'pie',
                data: {
                    labels: pieQtyLabels,
                    datasets: [{
                        data: pieQtyValues,
                        backgroundColor: pieColors
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'right' },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw || 0;
                                    const label = context.label || '';
                                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return `${label}: ${value.toLocaleString()} units (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            createOrUpdateChart('amountBarChart', {
                type: 'bar',
                data: {
                    labels: barLabels,
                    datasets: [
                        {
                            label: 'Invoice',
                            data: invoiceAmounts,
                            backgroundColor: barInvoiceColor
                        },
                        {
                            label: 'Credit',
                            data: creditAmounts,
                            backgroundColor: barCreditColor
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
            
            createOrUpdateChart('quantityBarChart', {
                type: 'bar',
                data: {
                    labels: barQtyLabels,
                    datasets: [
                        {
                            label: 'Invoice',
                            data: invoiceQuantities,
                            backgroundColor: barInvoiceColor
                        },
                        {
                            label: 'Credit',
                            data: creditQuantities,
                            backgroundColor: barCreditColor
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
            
            console.log('All charts initialized successfully');
        } catch (error) {
            console.error('Chart initialization error:', error);
        }
    }
    
    // Helper function to create or update charts
    function createOrUpdateChart(id, config) {
        const canvas = document.getElementById(id);
        if (!canvas) {
            console.warn(`Canvas #${id} not found`);
            return null;
        }
        
        // Destroy existing chart if it exists
        if (chartObjects[id]) {
            chartObjects[id].destroy();
            delete chartObjects[id];
        }
        
        // Create new chart
        chartObjects[id] = new Chart(canvas, config);
        return chartObjects[id];
    }
</script>